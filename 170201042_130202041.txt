from django.contrib import admin
from django.apps import AppConfig


class PagesConfig(AppConfig):
    name = 'pages'
from django.db import models
from django.test import TestCase
from django.urls import path
from . import views

urlpatterns = [
    path("", views.index, name="index"),
    path("frekans", views.frekans, name="frekans"),
    path("frekansResult", views.frekansResult, name="frekansResult"),
    path("keyword", views.keyword, name="keyword"),
    path("keywordResult", views.keywordResult, name="keywordResult"),
    path("similarityScore", views.similarityScore, name="similarityScore"),
    path(
        "similarityScoreResult",
        views.similarityScoreResult,
        name="similarityScoreResult",
    ),
    path("indexingAndSort", views.indexingAndSort, name="indexingAndSort"),
    path(
        "indexingAndSortResult",
        views.indexingAndSortResult,
        name="indexingAndSortResult",
    ),
    path("semantic", views.semantic, name="semantic"),
    path("semanticResult", views.semanticResult, name="semanticResult"),
]
from django.shortcuts import render
from django.http import HttpResponse
from bs4 import BeautifulSoup
import requests
import re
import string


def index(request):
    return render(request, "pages/index.html")


def frekans(request):
    return render(request, "pages/frekans.html")


def frekansResult(request):
    url = request.POST.get("quantity")
    frequency = calculateFrequency(url)
    context = {"words": frequency.keys(), "frequency": frequency.values()}
    return render(request, "pages/frekansResult.html", context)


def keyword(request):
    return render(request, "pages/keyword.html")


def keywordResult(request):
    url = request.POST.get("quantity")
    top10 = exportTop10(url)
    context = {"words": top10.keys(), "frequency": top10.values()}
    return render(request, "pages/keywordResult.html", context)


def similarityScore(request):
    return render(request, "pages/similarityScore.html")


def similarityScoreResult(request):
    url_1 = request.POST.get("url_1")
    url_2 = request.POST.get("url_2")
    top10_1 = exportTop10(url_1)
    top10_2 = exportTop10(url_2)

    similarity = ""
    if url_1 == url_2:
        similarity = "100"
    else:
        similarity = calculateSimilarity(top10_1, top10_2, url_2)

    context = {
        "words_1": top10_1.keys(),
        "frequency_1": top10_1.values(),
        "words_2": top10_2.keys(),
        "frequency_2": top10_2.values(),
        "similarity": similarity,
    }

    return render(request, "pages/similarityScoreResult.html", context)


def indexingAndSort(request):
    return render(request, "pages/indexingAndSort.html")


def indexingAndSortResult(request):
    url_1 = request.POST.get("url_1")
    url_kumesi = request.POST.get("url_kumesi")
    url_kumesi = URLParser(url_kumesi)
    url_kumesi_2 = [subLink(link) for link in url_kumesi]
    url_kumesi_3 = [subLink(link) for link in url_kumesi_2]
    total_url = url_kumesi + url_kumesi_2 + url_kumesi_3
    top10_1 = exportTop10(url_1)
    similarity = {}

    for i in range(len(total_url)):
        top10_2 = exportTop10(total_url[i])
        similarity[total_url[i]] = calculateSimilarity(top10_1, top10_2, total_url[i])

    for key in similarity.keys():
        similarity[key] = float(similarity[key])

    similarity = dict(reversed(sorted(similarity.items(), key=lambda item: item[1])))

    url_kumesi_1_top10 = URLKumesi_getTop10(url_kumesi)
    url_kumesi_2_top10 = URLKumesi_getTop10(url_kumesi_2)
    url_kumesi_3_top10 = URLKumesi_getTop10(url_kumesi_3)

    context = {
        "similarity_url": similarity.keys(),
        "similarity_score": similarity.values(),
        "url_kumesi": url_kumesi_1_top10.values(),
        "url_kumesi_link": url_kumesi_1_top10.keys(),
        "url_kumesi_2": url_kumesi_2_top10.values(),
        "url_kumesi_link_2": url_kumesi_2_top10.keys(),
        "url_kumesi_3": url_kumesi_3_top10.values(),
        "url_kumesi_link_3": url_kumesi_3_top10.keys(),
    }
    return render(request, "pages/indexingAndSortResult.html", context)


def semantic(request):
    return render(request, "pages/semantic.html")


def semanticResult(request):
    url_1 = request.POST.get("url_1")
    url_kumesi = request.POST.get("url_kumesi")
    url_kumesi = URLParser(url_kumesi)
    url_kumesi_2 = [subLink(link) for link in url_kumesi]
    url_kumesi_3 = [subLink(link) for link in url_kumesi_2]
    total_url = url_kumesi + url_kumesi_2 + url_kumesi_3
    top10_1 = exportTop10(url_1)
    similarity = {}

    for i in range(len(total_url)):
        top10_2 = exportTop10(total_url[i])
        similarity[total_url[i]] = calculateSimilarity(top10_1, top10_2, total_url[i])

    for key in similarity.keys():
        similarity[key] = float(similarity[key])

    similarity = dict(reversed(sorted(similarity.items(), key=lambda item: item[1])))

    url_kumesi_1_top10 = multipleSemanticAnalysis(url_kumesi)
    url_kumesi_2_top10 = multipleSemanticAnalysis(url_kumesi_2)
    url_kumesi_3_top10 = multipleSemanticAnalysis(url_kumesi_3)

    context = {
        "similarity_url": similarity.keys(),
        "similarity_score": similarity.values(),
        "url_kumesi": url_kumesi_1_top10.values(),
        "url_kumesi_link": url_kumesi_1_top10.keys(),
        "url_kumesi_2": url_kumesi_2_top10.values(),
        "url_kumesi_link_2": url_kumesi_2_top10.keys(),
        "url_kumesi_3": url_kumesi_3_top10.values(),
        "url_kumesi_link_3": url_kumesi_3_top10.keys(),
    }

    return render(request, "pages/semanticResult.html", context)


"""
/////////////////////////////////////////
"""


def scrapeUrl(url):
    r = requests.get(url)
    source = BeautifulSoup(r.content, "lxml")
    allContent = source.find_all("p")
    allContentList = list()
    for tag in allContent:
        allContentList.append(tag.text)
    return allContentList


def splitWords(allContentList):
    wordList = ""
    for tag in allContentList:
        tag = tag.lower()
        tag_no_punctuation = re.sub("[^\w\s]", "", tag)
        wordList = wordList + tag_no_punctuation
    wordList = wordList.split()
    return wordList


def calculateFrequency(url):
    allContent = scrapeUrl(url)
    wordList = splitWords(allContent)
    frequency = {}
    for word in wordList:
        if word not in frequency.keys():
            frequency[word] = 1
        else:
            num = frequency[word] + 1
            frequency.update({word: num})
    return frequency


def exportTop10(url):
    frequency = calculateFrequency(url)
    baglacList = [
        "zira",
        "yoksa",
        "yine",
        "yeter",
        "ki",
        "yalnız",
        "yahut",
        "da",
        "ya",
        "veyahut",
        "veya",
        "ve",
        "üstelik",
        "öyleyse",
        "öyle",
        "oysaki",
        "oysa",
        "nitekim",
        "ne",
        "de",
        "ne",
        "yazık",
        "var",
        "nasıl",
        "mademki",
        "lâkin",
        "kısacası",
        "ise",
        "ile",
        "hem",
        "hele",
        "hatta",
        "hâlbuki",
        "gerek",
        "gerekse",
        "gene",
        "fakat",
        "demek",
        "dahi",
        "çünkü",
        "bile",
        "ancak",
        "ama",
        "açıkçası",
    ]

    frequency = dict(reversed(sorted(frequency.items(), key=lambda item: item[1])))

    i = 0
    top10 = {}
    for key, value in frequency.items():
        if i == 10:
            break
        else:
            if key in baglacList:
                continue
            else:
                top10[key] = value
                i = i + 1

    return top10


def calculateSimilarity(top10_1, top10_2, url_2):
    frequency = calculateFrequency(url_2)
    keyWordCarpim = 1
    totalWordCount = 0

    for keys_1 in top10_1.keys():
        if keys_1 in top10_2.keys():
            keyWordCarpim = keyWordCarpim * top10_2[keys_1]

    if keyWordCarpim == 1:
        return totalWordCount

    for value in frequency.values():
        totalWordCount = totalWordCount + value

    result = (keyWordCarpim / totalWordCount) * 100
    return f"{result:.4f}"


def URLParser(url_kumesi):
    urlList = url_kumesi.split(",")
    return urlList


def subLink(url):
    r = requests.get(url)
    source = BeautifulSoup(r.content, "lxml")
    link = source.find("a", attrs={"href": re.compile("^http")})

    return link.get("href")


def URLKumesi_getTop10(url_kumesi):
    url_kumesi_top10 = {}
    for i in range(len(url_kumesi)):
        url_kumesi_top10[url_kumesi[i]] = exportTop10(url_kumesi[i])
    return url_kumesi_top10


def multipleSemanticAnalysis(url_kumesi):
    url_kumesi_semantik = {}
    for i in range(len(url_kumesi)):
        url_kumesi_semantik[url_kumesi[i]] = semanticAnalysis(url_kumesi[i])
    return url_kumesi_semantik


def fileOperations():
    file1 = open(f"kelime_esanlamlisi.txt", "r", encoding="utf8")
    Lines = file1.readlines()
    es_anlamlilar = {}
    for line in Lines:
        words = line.split()
        if len(words) == 2:
            if words[0] in es_anlamlilar.keys():
                es_anlamlilar[words[0]] = es_anlamlilar[words[0]] + "," + words[1]
            else:
                es_anlamlilar[words[0]] = words[1]

    return es_anlamlilar


def frequencyWithoutBaglac(url):
    kelimeler = calculateFrequency(url)
    newKelimeler = {}

    baglacList = [
        "zira",
        "yoksa",
        "yine",
        "yeter",
        "ki",
        "yalnız",
        "yahut",
        "da",
        "ya",
        "veyahut",
        "veya",
        "ve",
        "üstelik",
        "öyleyse",
        "öyle",
        "oysaki",
        "oysa",
        "nitekim",
        "ne",
        "de",
        "ne",
        "yazık",
        "var",
        "nasıl",
        "mademki",
        "lâkin",
        "kısacası",
        "ise",
        "ile",
        "hem",
        "hele",
        "hatta",
        "hâlbuki",
        "gerek",
        "gerekse",
        "gene",
        "fakat",
        "demek",
        "dahi",
        "çünkü",
        "bile",
        "ancak",
        "ama",
        "açıkçası",
    ]

    for key, value in kelimeler.items():
        if key not in baglacList:
            newKelimeler[key] = value

    return newKelimeler


def semanticAnalysis(url):
    kelimeler = frequencyWithoutBaglac(url)
    top10 = exportTop10(url)
    es_anlamlilar = fileOperations()
    semantik = {}

    for kelime in top10.keys():
        if kelime in es_anlamlilar.keys():
            print(kelime, es_anlamlilar[kelime])
            print("------------------")
            mutfak = es_anlamlilar[kelime].split(",")
            for m in mutfak:
                if m in kelimeler.keys():
                    semantik[m] = kelimeler[m]

    return semantik
#headertext {
  color: aliceblue;
}

.footer {
  display: table-row;
  height: 1px;
}
{% extends 'layout.html' %}

{% block content %}
<div class='container'>
<h3 style='margin-top:30px;'>Sayfada Geçen Kelimelerin Frekanslarını Hesaplama</h3>
<p>URL içeriğinde (URL’in gösterdiği sayfa içeriğinde) her kelimenin kaçar defa yer aldığını(frekansını) bulunuz.</p>
<p>Frekansını hesaplamak istediğiniz URL'yi giriniz</p>
<form action="{% url 'frekansResult' %}" method="POST">
    {% csrf_token %}
    <input type="text" name="quantity" placeholder="URL alanı">
    <input type="submit" value="Hesapla">
</form>
</div>
{% endblock %}
{% extends 'layout.html' %}

{% block content %}

    {% if words %}
        <div class='container'>
            <h1 class='text-center' style="margin-bottom:30px; margin-top:30px;"> Verilen URL'deki Kelimeler ve Frekansları</h1>
            <div class='row'>
                <div class='col-sm'>
                    <h3>Kelimeler</h3>
                    {% for word in words %}
                        <p>{{word}}</p>
                    {% endfor %}
                </div>
                <div class='col-sm'>
                    <h3>Frekanslar</h3>
                    {% for num in frequency %}
                        <p>{{num}}</p>
                    {% endfor %}
                </div>
            </div>
        </div>
    {% else %}
        <div class="alert alert-warning">
            <p>İçerik Bulunamadı!</p>
        </div>
    {% endif %}
{% endblock %}
{% extends 'layout.html' %}

{% block content %}
    <div class='container text-center' style="margin-top: 30px;">
        <h3 style='margin-bottom: 10px;'>Yapmak istediğiniz işlemi seçiniz</h3>
        <a class="btn btn-success btn-block" href="{% url 'frekans'%}" role="button">Sayfada Geçen Kelimelerin Frekanslarını Hesaplama</a>
        <a class="btn btn-success btn-block" href="{% url 'keyword' %}" role="button">Anahtar Kelime Çıkarma</a>
        <a class="btn btn-success btn-block" href="{% url 'similarityScore' %}" role="button">İki Sayfa (URL) Arasındaki Benzerlik Skorlaması</a>
        <a class="btn btn-success btn-block" href="{% url 'indexingAndSort' %}" role="button">Site İndexleme ve Sıralama</a>
        <a class="btn btn-success btn-block" href="{% url 'semantic' %}" role="button">Semantik Analiz</a>
    </div>
{% endblock %}
{% extends 'layout.html' %}

{% block content %}
<div class='container'>
<h3 style='margin-top:30px;'>Site İndexleme ve Sıralama</h3>
<p>Bu aşamada projenin web sitesindeki bir sayfada URL girilecek
    bir alan oluşturulacaktır. Girilen bu URL’nin içeriği ile web site kümesindeki her bir web sayfasının
    içeriklerinin benzerlik skorları ayrı ayrı hesaplanacaktır. Ancak bu sefer skor hesaplaması yaparken
    bu web site kümesinde bulunan web sayfalarının içeriğine ilaveten yine bu sayfalarda bulunan tüm
    alt URL’leri de dikkate alınmalıdır. </p>
<p>Frekansını hesaplamak istediğiniz URL'leri giriniz</p>
<form action="{% url 'indexingAndSortResult' %}" method="POST">
    {% csrf_token %}
    <input type="text" name="url_1" placeholder="URL 1 alanı">
    <input type="text" style="width: 700px;" name="url_kumesi" placeholder="Toplu URL alanı">
    <input type="submit" value="Hesapla">
</form>
</div>
{% endblock %}
{% extends 'layout.html' %}

{% block content %}

    {% if similarity_url %}
        <div class='container'>
            <div class='row text-center'>
                <h3 style="margin-bottom:40px; margin-left:70px; margin-top:30px;"> Verilen URL Kümesinin ve Kümenin Alt Linklerinin Benzerlik Oranı Sıralaması</h3>
                <div class="col-sm">
                    <h3>URL'ler</h3>
                    {% for url in similarity_url %}
                        <p>{{url}}</p>
                    {% endfor %}
                </div>
                <div class="col-sm">
                    <h3>Benzerlik Oranları</h3>
                    {% for score in similarity_score %}
                        <p> % {{score}}</p>
                    {% endfor %}
                </div>
            </div>

            <div class="row">
                <h3 class='text-center' style="margin-bottom:40px; margin-top:30px;"> Her URL (bir web sitesi) için, sırasını, skorunu, alt URL’lerin ağaç yapısını ve her düğümümdeki
                    her bir anahtar kelimenin yer alma sayısı ile birlikte yazdırın.</h3>
                    <div class="row">
                        <div class="col" style="width: 200px; overflow: auto;">
                            <h5>Ana URL</h5>
                            {% for url in url_kumesi_link %}
                                <p style="margin-top: 35px; margin-bottom:375px">{{url}}</p>
                            {% endfor %}
                        </div>
                        <div class="col" style="width: 200px;">
                            <h5>Anahtar Kelime/Frekans</h5>
                            {% for data in url_kumesi %}
                                {% for key,value in data.items %}
                                    <p> {{key}}  {{value}}</p>
                                {% endfor %}
                                <br>
                            {% endfor %}
                        </div>
                        <div class="col" style="width: 200px; overflow: auto;">
                            <h5>URL- Derinlik 2</h5>
                            {% for url in url_kumesi_link_2 %}
                                <p style="margin-top: 35px; margin-bottom:375px">{{url}}</p>
                            {% endfor %}
                        </div>
                        <div class="col" style="width: 200px; ">
                            <h5>Anahtar Kelime/Frekans</h5>
                            {% for data in url_kumesi_2 %}
                                {% for key,value in data.items %}
                                    <p> {{key}}  {{value}}</p>
                                {% endfor %}
                                <br>
                            {% endfor %}
                        </div>
                        <div class="col" style="width: 200px; overflow: auto;">
                            <h5>URL- Derinlik 3</h5>
                            {% for url in url_kumesi_link_3 %}
                                <p style="margin-top: 35px; margin-bottom:375px">{{url}}</p>
                            {% endfor %}
                        </div>
                        <div class="col"style="width: 200px;">
                            <h5>Anahtar Kelime/Frekans</h5>
                            {% for data in url_kumesi_3 %}
                                {% for key,value in data.items %}
                                    <p> {{key}}  {{value}}</p>
                                {% endfor %}
                                <br>
                            {% endfor %}
                        </div>
                    </div>
            </div>
        </div>
    {% else %}
        <div class="alert alert-warning">
            <p>İçerik Bulunamadı!</p>
        </div>
    {% endif %}
{% endblock %}
{% extends 'layout.html' %}

{% block content %}
<div class='container'>
<h3 style='margin-top:30px;'>Sayfada Geçen Kelimelerin Frekanslarını Hesaplama</h3>
<p>URL içeriğinde (URL’in gösterdiği sayfa içeriğinde) her kelimenin kaçar defa yer aldığını(frekansını) bulunuz.</p>
<p>Frekansını hesaplamak istediğiniz URL'yi giriniz</p>
<form action="{% url 'keywordResult' %}" method="POST">
    {% csrf_token %}
    <input type="text" name="quantity" placeholder="URL alanı">
    <input type="submit" value="Hesapla">
</form>
</div>
{% endblock %}
{% extends 'layout.html' %}

{% block content %}

    {% if words %}
        <div class='container'>
            <h1 class='text-center' style="margin-bottom:30px; margin-top:30px;"> Verilen URL'de en sık geçen ilk 10 kelime</h1>
            <div class='row'>
                <div class='col-sm'>
                    <h3>Kelimeler</h3>
                    {% for word in words %}
                        <p>{{word}}</p>
                    {% endfor %}
                </div>
                <div class='col-sm'>
                    <h3>Frekansları</h3>
                    {% for num in frequency %}
                        <p>{{num}}</p>
                    {% endfor %}
                </div>
            </div>
        </div>
    {% else %}
        <div class="alert alert-warning">
            <p>İçerik Bulunamadı!</p>
        </div>
    {% endif %}
{% endblock %}
{% extends 'layout.html' %}

{% block content %}
<div class='container'>
<h3 style='margin-top:30px;'>Semantik Analiz</h3>
<p>Verilen web siteleri i¸cerisinde anahtar kelimelerle semantik olarak alakalı kelimeler
    olabilir. Örneğin, “ulusal” yerine “milli” kelimesi yer alabilir. Bu kelimelere “alakalı
    anahtar kelimeler” diyelim. Alakalı anahtar kelimeleri bulun ve yazdırın. Yinelemeli olarak 4. aşamadaki analizi yapınız.</p>
<p>Frekansını hesaplamak istediğiniz URL'leri giriniz</p>
<form action="{% url 'semanticResult' %}" method="POST">
    {% csrf_token %}
    <input type="text" name="url_1" placeholder="URL 1 alanı">
    <input type="text" style="width: 700px;" name="url_kumesi" placeholder="Toplu URL alanı">
    <input type="submit" value="Hesapla">
</form>
</div>
{% endblock %}
{% extends 'layout.html' %}

{% block content %}

    {% if similarity_url %}
        <div class='container'>
            <div class='row text-center'>
                <h3 style="margin-bottom:40px; margin-left:70px; margin-top:30px;"> Verilen URL Kümesinin ve Kümenin Alt Linklerinin Benzerlik Oranı Sıralaması</h3>
                <div class="col-sm">
                    <h3>URL'ler</h3>
                    {% for url in similarity_url %}
                        <p>{{url}}</p>
                    {% endfor %}
                </div>
                <div class="col-sm">
                    <h3>Benzerlik Oranları</h3>
                    {% for score in similarity_score %}
                        <p> % {{score}}</p>
                    {% endfor %}
                </div>
            </div>

            <div class="row">
                <h3 class='text-center' style="margin-bottom:40px; margin-top:30px;"> Her URL (bir web sitesi) için, sırasını, skorunu, alt URL’lerin ağaç yapısını ve her düğümümdeki
                    her bir anahtar kelimenin yer alma sayısı ile birlikte yazdırın.</h3>
                    <div class="row">
                        <div class="col" style="width: 200px; overflow: auto;">
                            <h5>Ana URL</h5>
                            {% for url in url_kumesi_link %}
                                <p style="margin-top: 35px; margin-bottom:650px">{{url}}</p>
                            {% endfor %}
                        </div>
                        <div class="col" style="width: 200px;">
                            <h5>Anahtar Kelime/Frekans</h5>
                            {% for data in url_kumesi %}
                                <div style="height: 700px">
                                    {% for key,value in data.items %}
                                    <p> {{key}}  {{value}}</p>
                                    {% endfor %}
                                </div>
                            {% endfor %}
                        </div>
                        <div class="col" style="width: 200px; overflow: auto;">
                            <h5>URL- Derinlik 2</h5>
                            {% for url in url_kumesi_link_2 %}
                                <p style="margin-top: 35px; margin-bottom:650px">{{url}}</p>
                            {% endfor %}
                        </div>
                        <div class="col" style="width: 200px; ">
                            <h5>Anahtar Kelime/Frekans</h5>
                            {% for data in url_kumesi_2 %}
                                <div style="height: 700px">
                                    {% for key,value in data.items %}
                                    <p> {{key}}  {{value}}</p>
                                    {% endfor %}
                                </div>
                            {% endfor %}
                        </div>
                        <div class="col" style="width: 200px; overflow: auto;">
                            <h5>URL- Derinlik 3</h5>
                            {% for url in url_kumesi_link_3 %}
                                <p style="margin-top: 35px; margin-bottom:650px">{{url}}</p>
                            {% endfor %}
                        </div>
                        <div class="col"style="width: 200px;">
                            <h5>Anahtar Kelime/Frekans</h5>
                            {% for data in url_kumesi_3 %}
                                <div style="height: 700px">
                                    {% for key,value in data.items %}
                                    <p> {{key}}  {{value}}</p>
                                    {% endfor %}
                                </div>
                            {% endfor %}
                        </div>
                    </div>
            </div>
        </div>
    {% else %}
        <div class="alert alert-warning">
            <p>İçerik Bulunamadı!</p>
        </div>
    {% endif %}
{% endblock %}
{% extends 'layout.html' %}

{% block content %}
<div class='container'>
<h3 style='margin-top:30px;'>İki Sayfa (URL) Arasındaki Benzerlik Skorlaması</h3>
<p>İkinci bölümde 1. URL için elde edilen anahtar kelimelerin 2. URL’nin içeriğinde yer alma sayısına
dayalı bir benzerlik skor formulü tanımlayınız. </p>
<p>Frekansını hesaplamak istediğiniz URL'leri giriniz</p>
<form action="{% url 'similarityScoreResult' %}" method="POST">
    {% csrf_token %}
    <input type="text" name="url_1" placeholder="URL 1 alanı">
    <input type="text" name="url_2" placeholder="URL 2 alanı">
    <input type="submit" value="Hesapla">
</form>
</div>
{% endblock %}
{% extends 'layout.html' %}

{% block content %}

    {% if words_1 %}
        <div class='container'>
            <h1 class='text-center' style="margin-bottom:40px; margin-top:30px;"> Verilen URL'lerde en sık geçen ilk 10 kelime ve frekansları</h1>
            <div class='row'>
                <div class='col-sm'>
                    <h3>URL 1 - Kelimeler</h3>
                    {% for word in words_1 %}
                        <p>{{word}}</p>
                    {% endfor %}
                </div>
                <div class='col-sm'>
                    <h3>URL 1 - Frekansları</h3>
                    {% for num in frequency_1 %}
                        <p>{{num}}</p>
                    {% endfor %}
                </div>
                <div class='col-sm'>
                    <h3>URL 2 - Kelimeler</h3>
                    {% for word in words_2 %}
                        <p>{{word}}</p>
                    {% endfor %}
                </div>
                <div class='col-sm'>
                    <h3>URL 2 - Frekansları</h3>
                    {% for num in frequency_2 %}
                        <p>{{num}}</p>
                    {% endfor %}
                </div>
            </div>
            <div class='text-center' style='margin-top:40px;'>
                <h3>İki URL arasındaki benzerlik skoru % {{similarity}} </h3>
            </div>
        </div>
    {% else %}
        <div class="alert alert-warning">
            <p>İçerik Bulunamadı!</p>
        </div>
    {% endif %}
{% endblock %}
{% load static %}
    <div class="container text-center" style="background-color: #01953f; height:80px; margin-top:156px;">
        <div style='color:white; padding-top:30px;'>Tayfun KUŞÇU 170201042  -  Sinan BALCIOĞLU 130202041</div>
    </div>
{% load static %}
<div class="container">
    <div class='row' style="background-color: #01953f;">
        <div class="col-md-4" style="height: 200px;">
        <a href="{% url 'index' %}">
            <img src="{% static 'img/logo.png' %}" class='img-responsive' style='height: 200px;'  alt='logo' title="Anasayfa">
        </a>
        </div>
        <div id="headertext" class="col-md-8">
            <div style="margin-top: 30px;">
                <h2>Kocaeli Üniversitesi Bilgisayar Mühendisliği</h2>
                <h4>Yazılım Laboratuvarı II</h4>
                <h6>Proje 1 - Web İndeksleme Uygulaması</h6>
            </div>
        </div>
    </div>
</div>
{% load static %}
<!DOCTYPE html>
<html lang="en" class="has-sticky-footer">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/css/bootstrap.min.css" integrity="sha384-B0vP5xmATw1+K9KRQjQERJvTumQW0nPEzvF6L/Z6nronJ3oUOFUFpCjEUQouq2+l" crossorigin="anonymous">
    <link rel="stylesheet" href="{% static 'css/style.css' %}">
    <link rel="icon" href="../static/img/logo.png">
    <title>Yazlab II - Proje 1</title>
</head>
<body>
    {% include 'partials/_header.html' %}
    
    {% block content %}
    {% endblock %}

    {% include 'partials/_footer.html' %}
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js" integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/js/bootstrap.bundle.min.js" integrity="sha384-Piv4xVNRyMGpqkS2by6br4gNJ7DXjqk09RmUpJ8jgGtD7zP9yug3goQfGII0yAns" crossorigin="anonymous"></script>
</body>
</html>
import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'WebScraping.settings')

application = get_asgi_application()
"""
Django settings for WebScraping project.

Generated by 'django-admin startproject' using Django 3.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "xmzv91-w2&3jql@ssw22q08189&55)8t$y3b%t$%*+fa6!s-77"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "pages.apps.PagesConfig",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "WebScraping.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "WebScraping.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = "/static/"

STATICFILES_DIRS = [
    BASE_DIR / "static",
]
"""WebScraping URL Configuration

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/3.1/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path("", include("pages.urls")),
    path("admin/", admin.site.urls),
]
"""
WSGI config for WebScraping project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'WebScraping.settings')

application = get_wsgi_application()
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'WebScraping.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()




